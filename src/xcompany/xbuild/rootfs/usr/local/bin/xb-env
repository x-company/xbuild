#!/usr/bin/execlineb -P

define envdir /etc/xbuild/env.d
define logdir /var/log/xbuild
define rundir /var/run/xbuild
define -s runfile ${rundir}/xb-env

# Cleanup /etc/xbuild/env.d
foreground {
    if { s6-test -d /etc/xbuild/env.d/ }
    s6-rmrf /etc/xbuild/env.d/
}

foreground {
    if { s6-mkdir -p /etc/cont-finish.d }
    if { s6-mkdir -p /etc/cont-init.d }
    if { s6-mkdir -p /etc/fix-attrs.d }
    if { s6-mkdir -p /etc/services.d }
    if { s6-mkdir -p /etc/xbuild/env.d }

    if { s6-mkdir -p /var/cache/xbuild }
    if { s6-mkdir -p /var/local/xbuild/packages }
    if { s6-mkdir -p /var/log/xbuild }
    if { s6-mkdir -p /var/run/xbuild }
}

foreground {

    # Prepare Logging

    # Logdate with Time
    # backtick DATE { date +%d%m%Y-%H%M%S }
    # Logdate without Time
    backtick DATE { date +%d%m%Y }
    importas -u -n date DATE

    define -s logfile "${logdir}/xbuild-prepare-${date}.log"

    foreground {
        if -n { s6-test -f ${logfile} }
        s6-touch ${logfile}
    }

    foreground {
        redirfd -w 1 ${envdir}/XBUILD_LOG
        s6-echo -n -- "${logfile}"
    }
}

ifelse -n { s6-test -f ${runfile} }
{
    # Create Runfile
    if { s6-touch ${runfile} }

    foreground {
        # Copy Configuration if exists
        if { s6-test -f /build/xbuild.conf }
        mv -f /build/xbuild.conf /etc/xbuild/xbuild.conf
    }

    foreground {
        # Copy sources.list if exists
        if { s6-test -f /build/sources.list }
        mv -f /build/sources.list /etc/xbuild/sources.list
    }

    # Create an Dump from the current Environment and save it to /etc/xbuild/env.d/
    foreground {
        define -s excludes "HOME USER GROUP UID GID HOSTNAME PATH PWD SHLVL _ ?"

        if { s6-dumpenv -m 0777 /tmp/env.d/ }

        foreground {
            pipeline { s6-ls -0 -- /tmp/env.d/ }
            forstdin -o 0 -0 -- env_file
            importas -u env_file env_file

            foreground {
                forx exclude { ${excludes} }
                importas -u exclude exclude

                if { s6-test "${env_file}" = "${exclude}" }
                s6-rmrf /tmp/env.d/${env_file}
            }
        }

        foreground {
            pipeline { s6-ls -0 -- /tmp/env.d/ }
            forstdin -o 0 -0 -- env_file
            importas -u env_file env_file

            if { mv -f /tmp/env.d/${env_file} /etc/xbuild/env.d/${env_file} }
        }

        s6-rmrf /tmp/env.d/
    }

    foreground { redirfd -w 1 ${envdir}/LC_ALL s6-echo -n -- "C" }
    foreground { redirfd -w 1 ${envdir}/DEBIAN_FRONTEND s6-echo -n -- "noninteractive" }
    foreground { redirfd -w 1 ${envdir}/SHELL s6-echo -n -- "/bin/bash" }

    # Prevent initramfs updates from trying to run grub and lilo.
    # https://journal.paul.querna.org/articles/2013/10/15/docker-ubuntu-on-rackspace/
    # http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=594189
    foreground { redirfd -w 1 ${envdir}/INITRD s6-echo -n -- "no" }

    foreground { redirfd -w 1 ${envdir}/LC_CTYPE s6-echo -n -- "de_DE.UTF-8" }
    foreground { redirfd -w 1 ${envdir}/LANG s6-echo -n -- "de_DE.UTF-8" }
    foreground { redirfd -w 1 ${envdir}/LANGUAGE s6-echo -n -- "de_DE.UTF-8" }

    foreground { redirfd -w 1 ${envdir}/LANGUAGE s6-echo -n -- "de_DE.UTF-8" }

    # Load Settings
    foreground {
        if { s6-test -f /etc/xbuild/xbuild.conf }

        # Read first each line
        pipeline { cat -s /etc/xbuild/xbuild.conf }
        forstdin -d"\n" -- line
        importas -u line line

        foreground {

            # Extract Key
            pipeline { s6-echo -n ${line} }
            backtick key { s6-cut -d = -f1 }

            # Extract Value
            pipeline { s6-echo -n ${line} }
            backtick value { s6-cut -d = -f2 }

            importas -u key key
            importas -u value value

            # Base Configuration
            foreground {
                if { s6-test "${key}" = "core" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_CORE
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "packages" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_CORE_PACKAGES
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "custom_mirror" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_CORE_CUSTOM_MIRROR
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "disable_log" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_CORE_LOG_DISABLED
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "log_timestamp_format" }
                redirfd -w 1 ${envdir}/SOCKLOG_TIMESTAMP_FORMAT
                s6-echo -n -- ${value}
            }

            # Runtime Configuration
            foreground {
                if { s6-test "${key}" = "activate_dotnet" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_RUNTIME_DOTNET
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "dotnet_version" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_RUNTIME_DOTNET_VERSION
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "activate_pwsh" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_RUNTIME_PWSH
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "activate_node" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_RUNTIME_NODE
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "node_version" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_RUNTIME_NODE_VERSION
                s6-echo -n -- ${value}
            }

            # Development Settings
            foreground {
                if { s6-test "${key}" = "activate_dev" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_DEV
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "dev_packages" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_DEV_PACKAGES
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "dev_node_packages" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_DEV_PACKAGES_NODE
                s6-echo -n -- ${value}
            }

            # Consul Configuration
            foreground {
                if { s6-test "${key}" = "consul_enabled" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_CONSUL_ENABLED
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "consul_domain" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_CONSUL_DOMAIN
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "consul_mode" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_CONSUL_MODE
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "consul_servers" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_CONSUL_SERVERS
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "consul_name_prefix" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_CONSUL_NAME_PREFIX
                s6-echo -n -- ${value}
            }

            # Cleanup Configuration
            foreground {
                if { s6-test "${key}" = "cleanup_image" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_CLEANUP
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "cleanup_packages" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_CLEANUP_PACKAGES
                s6-echo -n -- ${value}
            }

            # Hardening Configuration
            foreground {
                if { s6-test "${key}" = "harden_image" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_HARDEN
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "harden_packages" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_HARDEN_PACKAGES
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "harden_libraries" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_HARDEN_LIBRARIES
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "harden_essential" }
                redirfd -w 1 ${envdir}/XBUILD_CONF_HARDEN_ESSENTIAL
                s6-echo -n -- ${value}
            }

            # s6 Configuration
            foreground {
                if { s6-test "${key}" = "s6_keep_env" }
                redirfd -w 1 ${envdir}/S6_KEEP_ENV
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "s6_logging" }
                redirfd -w 1 ${envdir}/S6_LOGGING
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "s6_behaviour_if_stage2_fails" }
                redirfd -w 1 ${envdir}/S6_BEHAVIOUR_IF_STAGE2_FAILS
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "s6_kill_finish_maxtime" }
                redirfd -w 1 ${envdir}/S6_KILL_FINISH_MAXTIME
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "s6_services_gracetime" }
                redirfd -w 1 ${envdir}/S6_SERVICES_GRACETIME
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "s6_kill_gracetime" }
                redirfd -w 1 ${envdir}/S6_KILL_GRACETIME
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "s6_logging_script" }
                redirfd -w 1 ${envdir}/S6_LOGGING_SCRIPT
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "s6_cmd_arg0" }
                redirfd -w 1 ${envdir}/S6_CMD_ARG0
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "s6_fix_attrs_hidden" }
                redirfd -w 1 ${envdir}/S6_FIX_ATTRS_HIDDEN
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "s6_cmd_wait_for_services" }
                redirfd -w 1 ${envdir}/S6_CMD_WAIT_FOR_SERVICES
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "s6_cmd_wait_for_services_maxtime" }
                redirfd -w 1 ${envdir}/S6_CMD_WAIT_FOR_SERVICES_MAXTIME
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "s6_read_only_root" }
                redirfd -w 1 ${envdir}/S6_READ_ONLY_ROOT
                s6-echo -n -- ${value}
            }

            foreground {
                if { s6-test "${key}" = "s6_sync_disks" }
                redirfd -w 1 ${envdir}/S6_SYNC_DISKS
                s6-echo -n -- ${value}
            }
        }
    }

    # Copy all Vars to s6 Environment
    foreground {
        pipeline { s6-ls -0 -- /etc/xbuild/env.d/ }
        forstdin -0 -o 0 -- env_file
        importas -u env_file env_file

        foreground { s6-rmrf /etc/s6/init/env/${env_file} }
        if { s6-ln -s /etc/xbuild/env.d/${env_file} /etc/s6/init/env/${env_file} }
    }
}

exit 0
