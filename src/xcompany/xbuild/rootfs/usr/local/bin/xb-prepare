#!/usr/bin/execlineb -P

s6-envdir /etc/xbuild/env.d/

# Import Environment Vars
importas -u logfile XBUILD_LOG
importas -u core_log_disabled CORE_LOG_DISABLED

importas -u core_packages CORE_PACKAGES
importas -u core_custom_packages CORE_CUSTOM_PACKAGES
importas -u core_custom_mirror CORE_CUSTOM_MIRROR_ENABLED

importas -u runtime_dotnet RUNTIME_DOTNET
importas -u runtime_pwsh RUNTIME_PWSH
importas -u runtime_node RUNTIME_NODE
importas -u runtime_node_version RUNTIME_NODE_VERSION

# Load System Informations
backtick osid { lsb_release -si }
backtick oscodename { lsb_release -sc }
backtick oscodever { lsb_release -sr }

foreground {
    if { s6-test "${core_custom_mirror}" = "Y" }

    if { xb-header "Configure Mirror" }
    ifelse { s6-test -f /etc/xbuild/sources.list }
    {
        if { xb-log "Custom Mirror is given. Initialize this Mirror" }
        if { s6-rmrf /etc/apt/sources.list }
        s6-ln -s /etc/xbuild/sources.list /etc/apt/sources.list
    }
    if { xb-log "Custom Mirror configuration could not found." }
}

foreground {

    if { s6-test "${core_custom_mirror}" = "N" }

    if { xb-header "Configure Mirror" }
    if { xb-log "Enable default Sources." }

    if { s6-rmrf /etc/apt/sources.list }

    foreground {

        importas -u -n osid osid
        importas -u -n oscodename oscodename

        s6-rename /etc/apt/sources.list.d/${osid}.${oscodename}.disabled /etc/apt/sources.list.d/${osid}.${oscodename}.list
    }
}

foreground {

    if { s6-test "${core_custom_mirror}" = "N" }
    if { xb-header "Configure Mirrors for activated Runtimes" }

    importas -u -n osid osid
    importas -u -n oscodename oscodename
    importas -u -n oscodever oscodever

    foreground {
        if { s6-test "${runtime_dotnet}" = "Y" }
        if { xb-log "Configure DotNet Core Mirror" }
        redirfd -w 1 /etc/apt/sources.list.d/dotnet.list
        s6-echo -n -- "deb [arch=amd64] https://packages.microsoft.com/${osid}/${oscodever}/prod ${oscodename} main"
    }

    foreground {
        if { s6-test "${runtime_pwsh}" = "Y" }
        if { xb-log "Configure PowerShell Mirror" }
        redirfd -w 1 /etc/apt/sources.list.d/pwsh.list
        s6-echo -n -- "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-${osid}-${oscodename}-prod ${oscodename} main"
    }

    foreground {
        if { s6-test "${runtime_node}" = "Y" }
        if { xb-log "Configure NodeJS Mirror" }
        redirfd -w 1 /etc/apt/sources.list.d/node.list
        s6-echo -n -- "deb [arch=amd64] https://deb.nodesource.com/node_${runtime_node_version}.x ${oscodename} main"
    }
}

foreground {

    foreground {
        if { xb-log "Reinitialize Package Sources" }

        ifelse { s6-test "${core_log_disabled}" = "N" }
        {
            redirfd -a 1 ${logfile}
            if { apt-get -q clean }
            if { apt-get -qy autoremove }
            if { xb-rmrf /var/lib/apt/lists/ }
            if { apt-get -q update }
        }
        if { apt-get -q clean }
        if { apt-get -qy autoremove }
        if { xb-rmrf /var/lib/apt/lists/ }
        if { apt-get -q update }
    }
}

foreground {

    if -n { test -z "${core_packages}" }
    if { xb-header "Install Core Packages and Tools" }
    define -s tmp ${core_packages}
    if { xb-install ${tmp} }
}

foreground {

    if -n { test -z "${core_custom_packages}" }
    if { xb-header "Install User Packages and Tools" }
    define -s tmp ${core_custom_packages}
    if { xb-install ${tmp} }
}

foreground {

    if { s6-test -d /var/local/xbuild/packages/ }

    if { xb-header "Install Packages and Tools without Mirror" }
    if { xb-log "Looking for Packages in /var/local/xbuild/packages" }
    elglob -0 -- deb_packages /var/local/xbuild/packages/**/*.deb
    forx -p -- deb_package { ${deb_packages} }
    importas -u deb_package deb_package

    if { xb-log "Install Deb Package '${deb_package}'" }
    if { dpkg --install ${deb_package} }
    if { s6-touch /var/cache/xbuild/packages/${deb_package} }
}

foreground {

    if { xb-header "Execute System Upgrade" }

    foreground {
        if { xb-log "Upgrade the Distribution" }

        ifelse { s6-test "${core_log_disabled}" = "N" }
        {
            redirfd -a 1 ${logfile}
            apt-get dist-upgrade -qy --no-install-recommends -o Dpkg::Options::="--force-confold"
        }
        apt-get dist-upgrade -qy --no-install-recommends -o Dpkg::Options::="--force-confold"
    }
}

foreground {

    if { xb-header "Update System Databases" }

    foreground {
        if { xb-log "Update Command Database" }
        ifelse { s6-test "${core_log_disabled}" = "N" }
        {
            redirfd -a 1 ${logfile}
            update-command-not-found
        }
        update-command-not-found
    }

    foreground {
        if { xb-log "Update Root Certificates" }
        ifelse { s6-test "${core_log_disabled}" = "N" }
        {
            redirfd -a 1 ${logfile}
            update-ca-certificates --fresh
        }
        update-ca-certificates --fresh
    }

    foreground {
        if { xb-log "Update Alternatives" }
        ifelse { s6-test "${core_log_disabled}" = "N" }
        {
            redirfd -a 1 ${logfile}
            update-alternatives --all --quiet --skip-auto
        }
        update-alternatives --all --quiet --skip-auto
    }
}
