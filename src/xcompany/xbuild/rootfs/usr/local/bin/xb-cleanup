#!/usr/bin/execlineb -P

s6-envdir /etc/xbuild/env.d/

# Import Environment Vars
importas -u logfile XBUILD_LOG
importas -u core_log_disabled CORE_LOG_DISABLED

importas -u core_packages CORE_PACKAGES
importas -u cleanup_packages CLEANUP_PACKAGES

importas -u dev_enabled DEV_ENABLED
importas -u dev_packages DEV_PACKAGES
importas -u dev_packages_node DEV_PACKAGES_NODE

foreground {

    if { s6-test -f /usr/bin/aptitude }

    # Base Pattern
    define base_pattern "~i!~M!~prequired!~pimportant!~R~prequired!~R~R~prequired!~R~pimportant!~R~R~pimportant"

    # Keep System Packages
    define system_packages "${base_pattern}!busybox!grub!initramfs-tools"

    foreground {

        # This Packages installed by User and should not removed
        if { xb-log "Prepare Package excludes" }
        foreground {
            if { s6-test /tmp/cleanup }
            s6-rmrf /tmp/cleanup
        }

        pipeline { s6-ls -0 -- /var/cache/xbuild/packages }
        forstdin -0 -o 0 -- package
        importas -u package package

        foreground {
            redirfd -a 1 /tmp/cleanup
            s6-echo -n -- "!${package}"
        }
    }

    foreground {
        backtick excludes { cat /tmp/cleanup }
        importas -u excludes excludes

        foreground {
            pipeline { aptitude search "${system_packages}${excludes}" --display-format "%p" }
            forstdin -- package
            importas -u package package

            foreground {

                if { xb-log "Remove Package '${package}'" }

                ifelse { s6-test "${core_log_disabled}" = "N" }
                {
                    redirfd -a 1 ${logfile}
                    apt-get purge -qy ${package}
                }
                apt-get purge -qy ${package}
            }
        }
    }
}

foreground {

    define -s packages "${core_packages} ${cleanup_packages} ${dev_packages}"

    foreground {
        forx package { ${packages} }
        importas -u package package

        foreground {
            if { xb-log "Remove Package '${package}'" }

            fdmove -c 2 1
            ifelse { s6-test "${core_log_disabled}" = "N" }
            {
                redirfd -a 1 ${logfile}
                apt-get purge -qy --allow-remove-essential ${package}
            }
            apt-get purge -qy --allow-remove-essential ${package}
        }
    }
}

foreground {

    if { s6-test "${dev_enabled}" = "Y" }
    if { xb-log "Remove Node Packages '${dev_packages_node}'" }

    define -s tmp ${dev_packages_node}

    fdmove -c 2 1
    ifelse { s6-test "${core_log_disabled}" = "N" }
    {
        redirfd -a 1 ${logfile}
        npm uninstall -g ${tmp}
    }
    npm uninstall -g ${tmp}
}

foreground {

    if { xb-log "Remove Packages which have no Dependencies" }

    ifelse { s6-test "${core_log_disabled}" = "N" }
    {
        redirfd -a 1 ${logfile}
        if { apt-get -qy autoremove }
        apt-get clean
    }

    if { apt-get -qy autoremove }
    apt-get clean
}

foreground {

    if { xb-header "Cleanup Package Lists and Temp Folder" }
    foreground {
        xb-rmrf /tmp /var/lib/apt/lists
    }
}

foreground {

    if { xb-header "Cleanup Cache" }

    if { xb-log "Remove python bytecode (if exists)" }
    if { find / -mount -name "*.pyc" -delete }
    if { find / -mount -name "*__pycache__*" -delete }

    if { xb-log "Cleanup Cache" }
    background {
        if { s6-test -d /var/run/xbuild }
        elglob -0 -- runfiles /var/run/xbuild/*
        forx -p -- runfile { ${runfiles} }
        importas -u runfile runfile
        s6-rmrf /var/run/xbuild/${runfile}
    }

    background {
        if { s6-test -d /var/cache/xbuild/packages }
        s6-rmrf /var/cache/xbuild/packages
    }
}

foreground {

    if { xb-log "Set Environment Variables for the Image Runtime" }

    redirfd -w 1 /etc/xbuild/env.d/DEBIAN_FRONTEND
    s6-echo -n -- "teletype"
}
